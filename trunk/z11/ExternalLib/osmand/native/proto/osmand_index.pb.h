// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmand_index.proto

#ifndef PROTOBUF_osmand_5findex_2eproto__INCLUDED
#define PROTOBUF_osmand_5findex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_osmand_5findex_2eproto();
void protobuf_AssignDesc_osmand_5findex_2eproto();
void protobuf_ShutdownFile_osmand_5findex_2eproto();

class OsmAndStoredIndex;
class FileIndex;
class AddressPart;
class CityBlock;
class PoiPart;
class MapLevel;
class MapPart;
class RoutingSubregion;
class RoutingPart;
class TransportPart;

// ===================================================================

class OsmAndStoredIndex : public ::google::protobuf::MessageLite {
 public:
  OsmAndStoredIndex();
  virtual ~OsmAndStoredIndex();
  
  OsmAndStoredIndex(const OsmAndStoredIndex& from);
  
  inline OsmAndStoredIndex& operator=(const OsmAndStoredIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const OsmAndStoredIndex& default_instance();
  
  void Swap(OsmAndStoredIndex* other);
  
  // implements Message ----------------------------------------------
  
  OsmAndStoredIndex* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OsmAndStoredIndex& from);
  void MergeFrom(const OsmAndStoredIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // required int64 dateCreated = 18;
  inline bool has_datecreated() const;
  inline void clear_datecreated();
  static const int kDateCreatedFieldNumber = 18;
  inline ::google::protobuf::int64 datecreated() const;
  inline void set_datecreated(::google::protobuf::int64 value);
  
  // repeated .FileIndex fileIndex = 7;
  inline int fileindex_size() const;
  inline void clear_fileindex();
  static const int kFileIndexFieldNumber = 7;
  inline const ::FileIndex& fileindex(int index) const;
  inline ::FileIndex* mutable_fileindex(int index);
  inline ::FileIndex* add_fileindex();
  inline const ::google::protobuf::RepeatedPtrField< ::FileIndex >&
      fileindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::FileIndex >*
      mutable_fileindex();
  
  // @@protoc_insertion_point(class_scope:OsmAndStoredIndex)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int64 datecreated_;
  ::google::protobuf::RepeatedPtrField< ::FileIndex > fileindex_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OsmAndStoredIndex* default_instance_;
};
// -------------------------------------------------------------------

class FileIndex : public ::google::protobuf::MessageLite {
 public:
  FileIndex();
  virtual ~FileIndex();
  
  FileIndex(const FileIndex& from);
  
  inline FileIndex& operator=(const FileIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FileIndex& default_instance();
  
  void Swap(FileIndex* other);
  
  // implements Message ----------------------------------------------
  
  FileIndex* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FileIndex& from);
  void MergeFrom(const FileIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 dateModified = 2;
  inline bool has_datemodified() const;
  inline void clear_datemodified();
  static const int kDateModifiedFieldNumber = 2;
  inline ::google::protobuf::int64 datemodified() const;
  inline void set_datemodified(::google::protobuf::int64 value);
  
  // required string fileName = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  
  // required int32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // repeated .AddressPart addressIndex = 8;
  inline int addressindex_size() const;
  inline void clear_addressindex();
  static const int kAddressIndexFieldNumber = 8;
  inline const ::AddressPart& addressindex(int index) const;
  inline ::AddressPart* mutable_addressindex(int index);
  inline ::AddressPart* add_addressindex();
  inline const ::google::protobuf::RepeatedPtrField< ::AddressPart >&
      addressindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::AddressPart >*
      mutable_addressindex();
  
  // repeated .TransportPart transportIndex = 9;
  inline int transportindex_size() const;
  inline void clear_transportindex();
  static const int kTransportIndexFieldNumber = 9;
  inline const ::TransportPart& transportindex(int index) const;
  inline ::TransportPart* mutable_transportindex(int index);
  inline ::TransportPart* add_transportindex();
  inline const ::google::protobuf::RepeatedPtrField< ::TransportPart >&
      transportindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::TransportPart >*
      mutable_transportindex();
  
  // repeated .PoiPart poiIndex = 10;
  inline int poiindex_size() const;
  inline void clear_poiindex();
  static const int kPoiIndexFieldNumber = 10;
  inline const ::PoiPart& poiindex(int index) const;
  inline ::PoiPart* mutable_poiindex(int index);
  inline ::PoiPart* add_poiindex();
  inline const ::google::protobuf::RepeatedPtrField< ::PoiPart >&
      poiindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::PoiPart >*
      mutable_poiindex();
  
  // repeated .MapPart mapIndex = 11;
  inline int mapindex_size() const;
  inline void clear_mapindex();
  static const int kMapIndexFieldNumber = 11;
  inline const ::MapPart& mapindex(int index) const;
  inline ::MapPart* mutable_mapindex(int index);
  inline ::MapPart* add_mapindex();
  inline const ::google::protobuf::RepeatedPtrField< ::MapPart >&
      mapindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::MapPart >*
      mutable_mapindex();
  
  // repeated .RoutingPart routingIndex = 12;
  inline int routingindex_size() const;
  inline void clear_routingindex();
  static const int kRoutingIndexFieldNumber = 12;
  inline const ::RoutingPart& routingindex(int index) const;
  inline ::RoutingPart* mutable_routingindex(int index);
  inline ::RoutingPart* add_routingindex();
  inline const ::google::protobuf::RepeatedPtrField< ::RoutingPart >&
      routingindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::RoutingPart >*
      mutable_routingindex();
  
  // @@protoc_insertion_point(class_scope:FileIndex)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 datemodified_;
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::RepeatedPtrField< ::AddressPart > addressindex_;
  ::google::protobuf::RepeatedPtrField< ::TransportPart > transportindex_;
  ::google::protobuf::RepeatedPtrField< ::PoiPart > poiindex_;
  ::google::protobuf::RepeatedPtrField< ::MapPart > mapindex_;
  ::google::protobuf::RepeatedPtrField< ::RoutingPart > routingindex_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FileIndex* default_instance_;
};
// -------------------------------------------------------------------

class AddressPart : public ::google::protobuf::MessageLite {
 public:
  AddressPart();
  virtual ~AddressPart();
  
  AddressPart(const AddressPart& from);
  
  inline AddressPart& operator=(const AddressPart& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AddressPart& default_instance();
  
  void Swap(AddressPart* other);
  
  // implements Message ----------------------------------------------
  
  AddressPart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AddressPart& from);
  void MergeFrom(const AddressPart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string nameEn = 4;
  inline bool has_nameen() const;
  inline void clear_nameen();
  static const int kNameEnFieldNumber = 4;
  inline const ::std::string& nameen() const;
  inline void set_nameen(const ::std::string& value);
  inline void set_nameen(const char* value);
  inline void set_nameen(const char* value, size_t size);
  inline ::std::string* mutable_nameen();
  
  // optional int32 indexNameOffset = 5;
  inline bool has_indexnameoffset() const;
  inline void clear_indexnameoffset();
  static const int kIndexNameOffsetFieldNumber = 5;
  inline ::google::protobuf::int32 indexnameoffset() const;
  inline void set_indexnameoffset(::google::protobuf::int32 value);
  
  // repeated .CityBlock cities = 8;
  inline int cities_size() const;
  inline void clear_cities();
  static const int kCitiesFieldNumber = 8;
  inline const ::CityBlock& cities(int index) const;
  inline ::CityBlock* mutable_cities(int index);
  inline ::CityBlock* add_cities();
  inline const ::google::protobuf::RepeatedPtrField< ::CityBlock >&
      cities() const;
  inline ::google::protobuf::RepeatedPtrField< ::CityBlock >*
      mutable_cities();
  
  // @@protoc_insertion_point(class_scope:AddressPart)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* nameen_;
  static const ::std::string _default_nameen_;
  ::google::protobuf::int32 indexnameoffset_;
  ::google::protobuf::RepeatedPtrField< ::CityBlock > cities_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddressPart* default_instance_;
};
// -------------------------------------------------------------------

class CityBlock : public ::google::protobuf::MessageLite {
 public:
  CityBlock();
  virtual ~CityBlock();
  
  CityBlock(const CityBlock& from);
  
  inline CityBlock& operator=(const CityBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CityBlock& default_instance();
  
  void Swap(CityBlock* other);
  
  // implements Message ----------------------------------------------
  
  CityBlock* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CityBlock& from);
  void MergeFrom(const CityBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CityBlock)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CityBlock* default_instance_;
};
// -------------------------------------------------------------------

class PoiPart : public ::google::protobuf::MessageLite {
 public:
  PoiPart();
  virtual ~PoiPart();
  
  PoiPart(const PoiPart& from);
  
  inline PoiPart& operator=(const PoiPart& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PoiPart& default_instance();
  
  void Swap(PoiPart* other);
  
  // implements Message ----------------------------------------------
  
  PoiPart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PoiPart& from);
  void MergeFrom(const PoiPart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required int32 left = 4;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 4;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);
  
  // required int32 right = 5;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 5;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);
  
  // required int32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);
  
  // required int32 bottom = 7;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 7;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PoiPart)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PoiPart* default_instance_;
};
// -------------------------------------------------------------------

class MapLevel : public ::google::protobuf::MessageLite {
 public:
  MapLevel();
  virtual ~MapLevel();
  
  MapLevel(const MapLevel& from);
  
  inline MapLevel& operator=(const MapLevel& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MapLevel& default_instance();
  
  void Swap(MapLevel* other);
  
  // implements Message ----------------------------------------------
  
  MapLevel* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MapLevel& from);
  void MergeFrom(const MapLevel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // required int32 left = 4;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 4;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);
  
  // required int32 right = 5;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 5;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);
  
  // required int32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);
  
  // required int32 bottom = 7;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 7;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);
  
  // optional int32 minzoom = 8;
  inline bool has_minzoom() const;
  inline void clear_minzoom();
  static const int kMinzoomFieldNumber = 8;
  inline ::google::protobuf::int32 minzoom() const;
  inline void set_minzoom(::google::protobuf::int32 value);
  
  // optional int32 maxzoom = 9;
  inline bool has_maxzoom() const;
  inline void clear_maxzoom();
  static const int kMaxzoomFieldNumber = 9;
  inline ::google::protobuf::int32 maxzoom() const;
  inline void set_maxzoom(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MapLevel)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::int32 minzoom_;
  ::google::protobuf::int32 maxzoom_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MapLevel* default_instance_;
};
// -------------------------------------------------------------------

class MapPart : public ::google::protobuf::MessageLite {
 public:
  MapPart();
  virtual ~MapPart();
  
  MapPart(const MapPart& from);
  
  inline MapPart& operator=(const MapPart& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MapPart& default_instance();
  
  void Swap(MapPart* other);
  
  // implements Message ----------------------------------------------
  
  MapPart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MapPart& from);
  void MergeFrom(const MapPart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .MapLevel levels = 5;
  inline int levels_size() const;
  inline void clear_levels();
  static const int kLevelsFieldNumber = 5;
  inline const ::MapLevel& levels(int index) const;
  inline ::MapLevel* mutable_levels(int index);
  inline ::MapLevel* add_levels();
  inline const ::google::protobuf::RepeatedPtrField< ::MapLevel >&
      levels() const;
  inline ::google::protobuf::RepeatedPtrField< ::MapLevel >*
      mutable_levels();
  
  // @@protoc_insertion_point(class_scope:MapPart)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::MapLevel > levels_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MapPart* default_instance_;
};
// -------------------------------------------------------------------

class RoutingSubregion : public ::google::protobuf::MessageLite {
 public:
  RoutingSubregion();
  virtual ~RoutingSubregion();
  
  RoutingSubregion(const RoutingSubregion& from);
  
  inline RoutingSubregion& operator=(const RoutingSubregion& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RoutingSubregion& default_instance();
  
  void Swap(RoutingSubregion* other);
  
  // implements Message ----------------------------------------------
  
  RoutingSubregion* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RoutingSubregion& from);
  void MergeFrom(const RoutingSubregion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional bool basemap = 3;
  inline bool has_basemap() const;
  inline void clear_basemap();
  static const int kBasemapFieldNumber = 3;
  inline bool basemap() const;
  inline void set_basemap(bool value);
  
  // required int32 left = 4;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 4;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);
  
  // required int32 right = 5;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 5;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);
  
  // required int32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);
  
  // required int32 bottom = 7;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 7;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);
  
  // required uint32 shifToData = 8;
  inline bool has_shiftodata() const;
  inline void clear_shiftodata();
  static const int kShifToDataFieldNumber = 8;
  inline ::google::protobuf::uint32 shiftodata() const;
  inline void set_shiftodata(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RoutingSubregion)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  bool basemap_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::uint32 shiftodata_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RoutingSubregion* default_instance_;
};
// -------------------------------------------------------------------

class RoutingPart : public ::google::protobuf::MessageLite {
 public:
  RoutingPart();
  virtual ~RoutingPart();
  
  RoutingPart(const RoutingPart& from);
  
  inline RoutingPart& operator=(const RoutingPart& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RoutingPart& default_instance();
  
  void Swap(RoutingPart* other);
  
  // implements Message ----------------------------------------------
  
  RoutingPart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RoutingPart& from);
  void MergeFrom(const RoutingPart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .RoutingSubregion subregions = 5;
  inline int subregions_size() const;
  inline void clear_subregions();
  static const int kSubregionsFieldNumber = 5;
  inline const ::RoutingSubregion& subregions(int index) const;
  inline ::RoutingSubregion* mutable_subregions(int index);
  inline ::RoutingSubregion* add_subregions();
  inline const ::google::protobuf::RepeatedPtrField< ::RoutingSubregion >&
      subregions() const;
  inline ::google::protobuf::RepeatedPtrField< ::RoutingSubregion >*
      mutable_subregions();
  
  // @@protoc_insertion_point(class_scope:RoutingPart)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::RoutingSubregion > subregions_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RoutingPart* default_instance_;
};
// -------------------------------------------------------------------

class TransportPart : public ::google::protobuf::MessageLite {
 public:
  TransportPart();
  virtual ~TransportPart();
  
  TransportPart(const TransportPart& from);
  
  inline TransportPart& operator=(const TransportPart& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const TransportPart& default_instance();
  
  void Swap(TransportPart* other);
  
  // implements Message ----------------------------------------------
  
  TransportPart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransportPart& from);
  void MergeFrom(const TransportPart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);
  
  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 left = 4;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 4;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);
  
  // optional int32 right = 5;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 5;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);
  
  // optional int32 top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);
  
  // optional int32 bottom = 7;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 7;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);
  
  // optional uint32 stringTableOffset = 8;
  inline bool has_stringtableoffset() const;
  inline void clear_stringtableoffset();
  static const int kStringTableOffsetFieldNumber = 8;
  inline ::google::protobuf::uint32 stringtableoffset() const;
  inline void set_stringtableoffset(::google::protobuf::uint32 value);
  
  // optional uint32 stringTableLength = 9;
  inline bool has_stringtablelength() const;
  inline void clear_stringtablelength();
  static const int kStringTableLengthFieldNumber = 9;
  inline ::google::protobuf::uint32 stringtablelength() const;
  inline void set_stringtablelength(::google::protobuf::uint32 value);
  
  // optional uint32 stopsTableOffset = 10;
  inline bool has_stopstableoffset() const;
  inline void clear_stopstableoffset();
  static const int kStopsTableOffsetFieldNumber = 10;
  inline ::google::protobuf::uint32 stopstableoffset() const;
  inline void set_stopstableoffset(::google::protobuf::uint32 value);
  
  // optional uint32 stopsTableLength = 11;
  inline bool has_stopstablelength() const;
  inline void clear_stopstablelength();
  static const int kStopsTableLengthFieldNumber = 11;
  inline ::google::protobuf::uint32 stopstablelength() const;
  inline void set_stopstablelength(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:TransportPart)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 offset_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::uint32 stringtableoffset_;
  ::google::protobuf::uint32 stringtablelength_;
  ::google::protobuf::uint32 stopstableoffset_;
  ::google::protobuf::uint32 stopstablelength_;
  friend void  protobuf_AddDesc_osmand_5findex_2eproto();
  friend void protobuf_AssignDesc_osmand_5findex_2eproto();
  friend void protobuf_ShutdownFile_osmand_5findex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TransportPart* default_instance_;
};
// ===================================================================


// ===================================================================

// OsmAndStoredIndex

// required uint32 version = 1;
inline bool OsmAndStoredIndex::has_version() const {
  return _has_bit(0);
}
inline void OsmAndStoredIndex::clear_version() {
  version_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 OsmAndStoredIndex::version() const {
  return version_;
}
inline void OsmAndStoredIndex::set_version(::google::protobuf::uint32 value) {
  _set_bit(0);
  version_ = value;
}

// required int64 dateCreated = 18;
inline bool OsmAndStoredIndex::has_datecreated() const {
  return _has_bit(1);
}
inline void OsmAndStoredIndex::clear_datecreated() {
  datecreated_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 OsmAndStoredIndex::datecreated() const {
  return datecreated_;
}
inline void OsmAndStoredIndex::set_datecreated(::google::protobuf::int64 value) {
  _set_bit(1);
  datecreated_ = value;
}

// repeated .FileIndex fileIndex = 7;
inline int OsmAndStoredIndex::fileindex_size() const {
  return fileindex_.size();
}
inline void OsmAndStoredIndex::clear_fileindex() {
  fileindex_.Clear();
}
inline const ::FileIndex& OsmAndStoredIndex::fileindex(int index) const {
  return fileindex_.Get(index);
}
inline ::FileIndex* OsmAndStoredIndex::mutable_fileindex(int index) {
  return fileindex_.Mutable(index);
}
inline ::FileIndex* OsmAndStoredIndex::add_fileindex() {
  return fileindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FileIndex >&
OsmAndStoredIndex::fileindex() const {
  return fileindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::FileIndex >*
OsmAndStoredIndex::mutable_fileindex() {
  return &fileindex_;
}

// -------------------------------------------------------------------

// FileIndex

// required int64 size = 1;
inline bool FileIndex::has_size() const {
  return _has_bit(0);
}
inline void FileIndex::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 FileIndex::size() const {
  return size_;
}
inline void FileIndex::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 dateModified = 2;
inline bool FileIndex::has_datemodified() const {
  return _has_bit(1);
}
inline void FileIndex::clear_datemodified() {
  datemodified_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 FileIndex::datemodified() const {
  return datemodified_;
}
inline void FileIndex::set_datemodified(::google::protobuf::int64 value) {
  _set_bit(1);
  datemodified_ = value;
}

// required string fileName = 3;
inline bool FileIndex::has_filename() const {
  return _has_bit(2);
}
inline void FileIndex::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FileIndex::filename() const {
  return *filename_;
}
inline void FileIndex::set_filename(const ::std::string& value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileIndex::set_filename(const char* value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileIndex::set_filename(const char* value, size_t size) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileIndex::mutable_filename() {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// required int32 version = 4;
inline bool FileIndex::has_version() const {
  return _has_bit(3);
}
inline void FileIndex::clear_version() {
  version_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 FileIndex::version() const {
  return version_;
}
inline void FileIndex::set_version(::google::protobuf::int32 value) {
  _set_bit(3);
  version_ = value;
}

// repeated .AddressPart addressIndex = 8;
inline int FileIndex::addressindex_size() const {
  return addressindex_.size();
}
inline void FileIndex::clear_addressindex() {
  addressindex_.Clear();
}
inline const ::AddressPart& FileIndex::addressindex(int index) const {
  return addressindex_.Get(index);
}
inline ::AddressPart* FileIndex::mutable_addressindex(int index) {
  return addressindex_.Mutable(index);
}
inline ::AddressPart* FileIndex::add_addressindex() {
  return addressindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AddressPart >&
FileIndex::addressindex() const {
  return addressindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::AddressPart >*
FileIndex::mutable_addressindex() {
  return &addressindex_;
}

// repeated .TransportPart transportIndex = 9;
inline int FileIndex::transportindex_size() const {
  return transportindex_.size();
}
inline void FileIndex::clear_transportindex() {
  transportindex_.Clear();
}
inline const ::TransportPart& FileIndex::transportindex(int index) const {
  return transportindex_.Get(index);
}
inline ::TransportPart* FileIndex::mutable_transportindex(int index) {
  return transportindex_.Mutable(index);
}
inline ::TransportPart* FileIndex::add_transportindex() {
  return transportindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TransportPart >&
FileIndex::transportindex() const {
  return transportindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::TransportPart >*
FileIndex::mutable_transportindex() {
  return &transportindex_;
}

// repeated .PoiPart poiIndex = 10;
inline int FileIndex::poiindex_size() const {
  return poiindex_.size();
}
inline void FileIndex::clear_poiindex() {
  poiindex_.Clear();
}
inline const ::PoiPart& FileIndex::poiindex(int index) const {
  return poiindex_.Get(index);
}
inline ::PoiPart* FileIndex::mutable_poiindex(int index) {
  return poiindex_.Mutable(index);
}
inline ::PoiPart* FileIndex::add_poiindex() {
  return poiindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PoiPart >&
FileIndex::poiindex() const {
  return poiindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::PoiPart >*
FileIndex::mutable_poiindex() {
  return &poiindex_;
}

// repeated .MapPart mapIndex = 11;
inline int FileIndex::mapindex_size() const {
  return mapindex_.size();
}
inline void FileIndex::clear_mapindex() {
  mapindex_.Clear();
}
inline const ::MapPart& FileIndex::mapindex(int index) const {
  return mapindex_.Get(index);
}
inline ::MapPart* FileIndex::mutable_mapindex(int index) {
  return mapindex_.Mutable(index);
}
inline ::MapPart* FileIndex::add_mapindex() {
  return mapindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapPart >&
FileIndex::mapindex() const {
  return mapindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::MapPart >*
FileIndex::mutable_mapindex() {
  return &mapindex_;
}

// repeated .RoutingPart routingIndex = 12;
inline int FileIndex::routingindex_size() const {
  return routingindex_.size();
}
inline void FileIndex::clear_routingindex() {
  routingindex_.Clear();
}
inline const ::RoutingPart& FileIndex::routingindex(int index) const {
  return routingindex_.Get(index);
}
inline ::RoutingPart* FileIndex::mutable_routingindex(int index) {
  return routingindex_.Mutable(index);
}
inline ::RoutingPart* FileIndex::add_routingindex() {
  return routingindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RoutingPart >&
FileIndex::routingindex() const {
  return routingindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::RoutingPart >*
FileIndex::mutable_routingindex() {
  return &routingindex_;
}

// -------------------------------------------------------------------

// AddressPart

// required int64 size = 1;
inline bool AddressPart::has_size() const {
  return _has_bit(0);
}
inline void AddressPart::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 AddressPart::size() const {
  return size_;
}
inline void AddressPart::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool AddressPart::has_offset() const {
  return _has_bit(1);
}
inline void AddressPart::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 AddressPart::offset() const {
  return offset_;
}
inline void AddressPart::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional string name = 3;
inline bool AddressPart::has_name() const {
  return _has_bit(2);
}
inline void AddressPart::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AddressPart::name() const {
  return *name_;
}
inline void AddressPart::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddressPart::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddressPart::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddressPart::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string nameEn = 4;
inline bool AddressPart::has_nameen() const {
  return _has_bit(3);
}
inline void AddressPart::clear_nameen() {
  if (nameen_ != &_default_nameen_) {
    nameen_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& AddressPart::nameen() const {
  return *nameen_;
}
inline void AddressPart::set_nameen(const ::std::string& value) {
  _set_bit(3);
  if (nameen_ == &_default_nameen_) {
    nameen_ = new ::std::string;
  }
  nameen_->assign(value);
}
inline void AddressPart::set_nameen(const char* value) {
  _set_bit(3);
  if (nameen_ == &_default_nameen_) {
    nameen_ = new ::std::string;
  }
  nameen_->assign(value);
}
inline void AddressPart::set_nameen(const char* value, size_t size) {
  _set_bit(3);
  if (nameen_ == &_default_nameen_) {
    nameen_ = new ::std::string;
  }
  nameen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddressPart::mutable_nameen() {
  _set_bit(3);
  if (nameen_ == &_default_nameen_) {
    nameen_ = new ::std::string;
  }
  return nameen_;
}

// optional int32 indexNameOffset = 5;
inline bool AddressPart::has_indexnameoffset() const {
  return _has_bit(4);
}
inline void AddressPart::clear_indexnameoffset() {
  indexnameoffset_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 AddressPart::indexnameoffset() const {
  return indexnameoffset_;
}
inline void AddressPart::set_indexnameoffset(::google::protobuf::int32 value) {
  _set_bit(4);
  indexnameoffset_ = value;
}

// repeated .CityBlock cities = 8;
inline int AddressPart::cities_size() const {
  return cities_.size();
}
inline void AddressPart::clear_cities() {
  cities_.Clear();
}
inline const ::CityBlock& AddressPart::cities(int index) const {
  return cities_.Get(index);
}
inline ::CityBlock* AddressPart::mutable_cities(int index) {
  return cities_.Mutable(index);
}
inline ::CityBlock* AddressPart::add_cities() {
  return cities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CityBlock >&
AddressPart::cities() const {
  return cities_;
}
inline ::google::protobuf::RepeatedPtrField< ::CityBlock >*
AddressPart::mutable_cities() {
  return &cities_;
}

// -------------------------------------------------------------------

// CityBlock

// required int64 size = 1;
inline bool CityBlock::has_size() const {
  return _has_bit(0);
}
inline void CityBlock::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 CityBlock::size() const {
  return size_;
}
inline void CityBlock::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool CityBlock::has_offset() const {
  return _has_bit(1);
}
inline void CityBlock::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CityBlock::offset() const {
  return offset_;
}
inline void CityBlock::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// required int32 type = 3;
inline bool CityBlock::has_type() const {
  return _has_bit(2);
}
inline void CityBlock::clear_type() {
  type_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CityBlock::type() const {
  return type_;
}
inline void CityBlock::set_type(::google::protobuf::int32 value) {
  _set_bit(2);
  type_ = value;
}

// -------------------------------------------------------------------

// PoiPart

// required int64 size = 1;
inline bool PoiPart::has_size() const {
  return _has_bit(0);
}
inline void PoiPart::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PoiPart::size() const {
  return size_;
}
inline void PoiPart::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool PoiPart::has_offset() const {
  return _has_bit(1);
}
inline void PoiPart::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 PoiPart::offset() const {
  return offset_;
}
inline void PoiPart::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional string name = 3;
inline bool PoiPart::has_name() const {
  return _has_bit(2);
}
inline void PoiPart::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& PoiPart::name() const {
  return *name_;
}
inline void PoiPart::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PoiPart::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PoiPart::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PoiPart::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required int32 left = 4;
inline bool PoiPart::has_left() const {
  return _has_bit(3);
}
inline void PoiPart::clear_left() {
  left_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PoiPart::left() const {
  return left_;
}
inline void PoiPart::set_left(::google::protobuf::int32 value) {
  _set_bit(3);
  left_ = value;
}

// required int32 right = 5;
inline bool PoiPart::has_right() const {
  return _has_bit(4);
}
inline void PoiPart::clear_right() {
  right_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 PoiPart::right() const {
  return right_;
}
inline void PoiPart::set_right(::google::protobuf::int32 value) {
  _set_bit(4);
  right_ = value;
}

// required int32 top = 6;
inline bool PoiPart::has_top() const {
  return _has_bit(5);
}
inline void PoiPart::clear_top() {
  top_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 PoiPart::top() const {
  return top_;
}
inline void PoiPart::set_top(::google::protobuf::int32 value) {
  _set_bit(5);
  top_ = value;
}

// required int32 bottom = 7;
inline bool PoiPart::has_bottom() const {
  return _has_bit(6);
}
inline void PoiPart::clear_bottom() {
  bottom_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 PoiPart::bottom() const {
  return bottom_;
}
inline void PoiPart::set_bottom(::google::protobuf::int32 value) {
  _set_bit(6);
  bottom_ = value;
}

// -------------------------------------------------------------------

// MapLevel

// required int64 size = 1;
inline bool MapLevel::has_size() const {
  return _has_bit(0);
}
inline void MapLevel::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 MapLevel::size() const {
  return size_;
}
inline void MapLevel::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool MapLevel::has_offset() const {
  return _has_bit(1);
}
inline void MapLevel::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MapLevel::offset() const {
  return offset_;
}
inline void MapLevel::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// required int32 left = 4;
inline bool MapLevel::has_left() const {
  return _has_bit(2);
}
inline void MapLevel::clear_left() {
  left_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 MapLevel::left() const {
  return left_;
}
inline void MapLevel::set_left(::google::protobuf::int32 value) {
  _set_bit(2);
  left_ = value;
}

// required int32 right = 5;
inline bool MapLevel::has_right() const {
  return _has_bit(3);
}
inline void MapLevel::clear_right() {
  right_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 MapLevel::right() const {
  return right_;
}
inline void MapLevel::set_right(::google::protobuf::int32 value) {
  _set_bit(3);
  right_ = value;
}

// required int32 top = 6;
inline bool MapLevel::has_top() const {
  return _has_bit(4);
}
inline void MapLevel::clear_top() {
  top_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 MapLevel::top() const {
  return top_;
}
inline void MapLevel::set_top(::google::protobuf::int32 value) {
  _set_bit(4);
  top_ = value;
}

// required int32 bottom = 7;
inline bool MapLevel::has_bottom() const {
  return _has_bit(5);
}
inline void MapLevel::clear_bottom() {
  bottom_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 MapLevel::bottom() const {
  return bottom_;
}
inline void MapLevel::set_bottom(::google::protobuf::int32 value) {
  _set_bit(5);
  bottom_ = value;
}

// optional int32 minzoom = 8;
inline bool MapLevel::has_minzoom() const {
  return _has_bit(6);
}
inline void MapLevel::clear_minzoom() {
  minzoom_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 MapLevel::minzoom() const {
  return minzoom_;
}
inline void MapLevel::set_minzoom(::google::protobuf::int32 value) {
  _set_bit(6);
  minzoom_ = value;
}

// optional int32 maxzoom = 9;
inline bool MapLevel::has_maxzoom() const {
  return _has_bit(7);
}
inline void MapLevel::clear_maxzoom() {
  maxzoom_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 MapLevel::maxzoom() const {
  return maxzoom_;
}
inline void MapLevel::set_maxzoom(::google::protobuf::int32 value) {
  _set_bit(7);
  maxzoom_ = value;
}

// -------------------------------------------------------------------

// MapPart

// required int64 size = 1;
inline bool MapPart::has_size() const {
  return _has_bit(0);
}
inline void MapPart::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 MapPart::size() const {
  return size_;
}
inline void MapPart::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool MapPart::has_offset() const {
  return _has_bit(1);
}
inline void MapPart::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MapPart::offset() const {
  return offset_;
}
inline void MapPart::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional string name = 3;
inline bool MapPart::has_name() const {
  return _has_bit(2);
}
inline void MapPart::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MapPart::name() const {
  return *name_;
}
inline void MapPart::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapPart::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapPart::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapPart::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .MapLevel levels = 5;
inline int MapPart::levels_size() const {
  return levels_.size();
}
inline void MapPart::clear_levels() {
  levels_.Clear();
}
inline const ::MapLevel& MapPart::levels(int index) const {
  return levels_.Get(index);
}
inline ::MapLevel* MapPart::mutable_levels(int index) {
  return levels_.Mutable(index);
}
inline ::MapLevel* MapPart::add_levels() {
  return levels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapLevel >&
MapPart::levels() const {
  return levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::MapLevel >*
MapPart::mutable_levels() {
  return &levels_;
}

// -------------------------------------------------------------------

// RoutingSubregion

// required int64 size = 1;
inline bool RoutingSubregion::has_size() const {
  return _has_bit(0);
}
inline void RoutingSubregion::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 RoutingSubregion::size() const {
  return size_;
}
inline void RoutingSubregion::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool RoutingSubregion::has_offset() const {
  return _has_bit(1);
}
inline void RoutingSubregion::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 RoutingSubregion::offset() const {
  return offset_;
}
inline void RoutingSubregion::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional bool basemap = 3;
inline bool RoutingSubregion::has_basemap() const {
  return _has_bit(2);
}
inline void RoutingSubregion::clear_basemap() {
  basemap_ = false;
  _clear_bit(2);
}
inline bool RoutingSubregion::basemap() const {
  return basemap_;
}
inline void RoutingSubregion::set_basemap(bool value) {
  _set_bit(2);
  basemap_ = value;
}

// required int32 left = 4;
inline bool RoutingSubregion::has_left() const {
  return _has_bit(3);
}
inline void RoutingSubregion::clear_left() {
  left_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RoutingSubregion::left() const {
  return left_;
}
inline void RoutingSubregion::set_left(::google::protobuf::int32 value) {
  _set_bit(3);
  left_ = value;
}

// required int32 right = 5;
inline bool RoutingSubregion::has_right() const {
  return _has_bit(4);
}
inline void RoutingSubregion::clear_right() {
  right_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 RoutingSubregion::right() const {
  return right_;
}
inline void RoutingSubregion::set_right(::google::protobuf::int32 value) {
  _set_bit(4);
  right_ = value;
}

// required int32 top = 6;
inline bool RoutingSubregion::has_top() const {
  return _has_bit(5);
}
inline void RoutingSubregion::clear_top() {
  top_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 RoutingSubregion::top() const {
  return top_;
}
inline void RoutingSubregion::set_top(::google::protobuf::int32 value) {
  _set_bit(5);
  top_ = value;
}

// required int32 bottom = 7;
inline bool RoutingSubregion::has_bottom() const {
  return _has_bit(6);
}
inline void RoutingSubregion::clear_bottom() {
  bottom_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RoutingSubregion::bottom() const {
  return bottom_;
}
inline void RoutingSubregion::set_bottom(::google::protobuf::int32 value) {
  _set_bit(6);
  bottom_ = value;
}

// required uint32 shifToData = 8;
inline bool RoutingSubregion::has_shiftodata() const {
  return _has_bit(7);
}
inline void RoutingSubregion::clear_shiftodata() {
  shiftodata_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 RoutingSubregion::shiftodata() const {
  return shiftodata_;
}
inline void RoutingSubregion::set_shiftodata(::google::protobuf::uint32 value) {
  _set_bit(7);
  shiftodata_ = value;
}

// -------------------------------------------------------------------

// RoutingPart

// required int64 size = 1;
inline bool RoutingPart::has_size() const {
  return _has_bit(0);
}
inline void RoutingPart::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 RoutingPart::size() const {
  return size_;
}
inline void RoutingPart::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool RoutingPart::has_offset() const {
  return _has_bit(1);
}
inline void RoutingPart::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 RoutingPart::offset() const {
  return offset_;
}
inline void RoutingPart::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional string name = 3;
inline bool RoutingPart::has_name() const {
  return _has_bit(2);
}
inline void RoutingPart::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RoutingPart::name() const {
  return *name_;
}
inline void RoutingPart::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoutingPart::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoutingPart::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoutingPart::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .RoutingSubregion subregions = 5;
inline int RoutingPart::subregions_size() const {
  return subregions_.size();
}
inline void RoutingPart::clear_subregions() {
  subregions_.Clear();
}
inline const ::RoutingSubregion& RoutingPart::subregions(int index) const {
  return subregions_.Get(index);
}
inline ::RoutingSubregion* RoutingPart::mutable_subregions(int index) {
  return subregions_.Mutable(index);
}
inline ::RoutingSubregion* RoutingPart::add_subregions() {
  return subregions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RoutingSubregion >&
RoutingPart::subregions() const {
  return subregions_;
}
inline ::google::protobuf::RepeatedPtrField< ::RoutingSubregion >*
RoutingPart::mutable_subregions() {
  return &subregions_;
}

// -------------------------------------------------------------------

// TransportPart

// required int64 size = 1;
inline bool TransportPart::has_size() const {
  return _has_bit(0);
}
inline void TransportPart::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 TransportPart::size() const {
  return size_;
}
inline void TransportPart::set_size(::google::protobuf::int64 value) {
  _set_bit(0);
  size_ = value;
}

// required int64 offset = 2;
inline bool TransportPart::has_offset() const {
  return _has_bit(1);
}
inline void TransportPart::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 TransportPart::offset() const {
  return offset_;
}
inline void TransportPart::set_offset(::google::protobuf::int64 value) {
  _set_bit(1);
  offset_ = value;
}

// optional string name = 3;
inline bool TransportPart::has_name() const {
  return _has_bit(2);
}
inline void TransportPart::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& TransportPart::name() const {
  return *name_;
}
inline void TransportPart::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TransportPart::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TransportPart::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportPart::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 left = 4;
inline bool TransportPart::has_left() const {
  return _has_bit(3);
}
inline void TransportPart::clear_left() {
  left_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 TransportPart::left() const {
  return left_;
}
inline void TransportPart::set_left(::google::protobuf::int32 value) {
  _set_bit(3);
  left_ = value;
}

// optional int32 right = 5;
inline bool TransportPart::has_right() const {
  return _has_bit(4);
}
inline void TransportPart::clear_right() {
  right_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 TransportPart::right() const {
  return right_;
}
inline void TransportPart::set_right(::google::protobuf::int32 value) {
  _set_bit(4);
  right_ = value;
}

// optional int32 top = 6;
inline bool TransportPart::has_top() const {
  return _has_bit(5);
}
inline void TransportPart::clear_top() {
  top_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 TransportPart::top() const {
  return top_;
}
inline void TransportPart::set_top(::google::protobuf::int32 value) {
  _set_bit(5);
  top_ = value;
}

// optional int32 bottom = 7;
inline bool TransportPart::has_bottom() const {
  return _has_bit(6);
}
inline void TransportPart::clear_bottom() {
  bottom_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 TransportPart::bottom() const {
  return bottom_;
}
inline void TransportPart::set_bottom(::google::protobuf::int32 value) {
  _set_bit(6);
  bottom_ = value;
}

// optional uint32 stringTableOffset = 8;
inline bool TransportPart::has_stringtableoffset() const {
  return _has_bit(7);
}
inline void TransportPart::clear_stringtableoffset() {
  stringtableoffset_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 TransportPart::stringtableoffset() const {
  return stringtableoffset_;
}
inline void TransportPart::set_stringtableoffset(::google::protobuf::uint32 value) {
  _set_bit(7);
  stringtableoffset_ = value;
}

// optional uint32 stringTableLength = 9;
inline bool TransportPart::has_stringtablelength() const {
  return _has_bit(8);
}
inline void TransportPart::clear_stringtablelength() {
  stringtablelength_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 TransportPart::stringtablelength() const {
  return stringtablelength_;
}
inline void TransportPart::set_stringtablelength(::google::protobuf::uint32 value) {
  _set_bit(8);
  stringtablelength_ = value;
}

// optional uint32 stopsTableOffset = 10;
inline bool TransportPart::has_stopstableoffset() const {
  return _has_bit(9);
}
inline void TransportPart::clear_stopstableoffset() {
  stopstableoffset_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 TransportPart::stopstableoffset() const {
  return stopstableoffset_;
}
inline void TransportPart::set_stopstableoffset(::google::protobuf::uint32 value) {
  _set_bit(9);
  stopstableoffset_ = value;
}

// optional uint32 stopsTableLength = 11;
inline bool TransportPart::has_stopstablelength() const {
  return _has_bit(10);
}
inline void TransportPart::clear_stopstablelength() {
  stopstablelength_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 TransportPart::stopstablelength() const {
  return stopstablelength_;
}
inline void TransportPart::set_stopstablelength(::google::protobuf::uint32 value) {
  _set_bit(10);
  stopstablelength_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osmand_5findex_2eproto__INCLUDED
